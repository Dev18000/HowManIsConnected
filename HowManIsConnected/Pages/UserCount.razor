@using HowManIsConnected.Services
@using HowManIsConnected.Models
@inject UserTrackerService UserTracker
@inject AuthenticationStateProvider AuthStateProvider

<h3>Online Users: @OnlineUsers.Count</h3>

<table>
    <thead>
        <tr>
            <th>Name</th>
            <th>Email</th>
            <th>Connected At</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var user in OnlineUsers)
        {
            <tr>
                <td>@user.Name</td>
                <td>@user.Email</td>
                <td>@user.ConnectedAt.ToLocalTime()</td>
            </tr>
        }
    </tbody>
</table>

@code {
    private List<UserInfo> OnlineUsers = new();

    protected override async Task OnInitializedAsync()
    {
        UserTracker.OnUserListChanged += UpdateUserList;
        OnlineUsers = UserTracker.GetConnectedUsers();

        AuthStateProvider.AuthenticationStateChanged += async (task) =>
        {
            var authState = await task;
            Console.WriteLine($"🔄 [UserCount] AuthState changed: {authState.User.Identity?.Name}");
            await Task.Delay(100);
            StateHasChanged();
        };
    }

    private void UpdateUserList(List<UserInfo> users)
    {
        Console.WriteLine($"🖥 [Blazor UI] Updating user list: {users.Count} users");

        InvokeAsync(() =>
        {
            OnlineUsers = users;
            StateHasChanged();
        });
    }

    public void Dispose()
    {
        UserTracker.OnUserListChanged -= UpdateUserList;
    }
}
